import { resolveViteConfigs } from "./shared-DyssOEyb.js";
import "./resolver-3bFppHAb.js";
import fs from "node:fs/promises";
import { join, resolve } from "node:path";
import { build as build$1 } from "vite";
import { existsSync } from "node:fs";
import http from "node:http";
import connect from "connect";
import sirv from "sirv";

//#region node/commands/build.ts
async function build(options, viteConfig = {}, args) {
	const indexPath = resolve(options.userRoot, "index.html");
	let originalIndexHTML;
	if (existsSync(indexPath)) originalIndexHTML = await fs.readFile(indexPath, "utf-8");
	await fs.writeFile(indexPath, options.utils.indexHtml, "utf-8");
	let config = void 0;
	try {
		const inlineConfig = await resolveViteConfigs(options, {
			plugins: [{
				name: "resolve-config",
				configResolved(_config) {
					config = _config;
				}
			}],
			build: { chunkSizeWarningLimit: 2e3 }
		}, viteConfig, "build");
		await build$1(inlineConfig);
	} finally {
		if (originalIndexHTML != null) await fs.writeFile(indexPath, originalIndexHTML, "utf-8");
		else await fs.unlink(indexPath);
	}
	const outDir = resolve(options.userRoot, config.build.outDir);
	if (options.data.config.seoMeta?.ogImage === "auto" || options.data.config.seoMeta?.ogImage?.startsWith(".")) {
		const filename = options.data.config.seoMeta?.ogImage === "auto" ? "og-image.png" : options.data.config.seoMeta.ogImage;
		const projectOgImagePath = resolve(options.userRoot, filename);
		const outputOgImagePath = resolve(outDir, filename);
		if (await fs.access(projectOgImagePath).then(() => true).catch(() => false)) await fs.copyFile(projectOgImagePath, outputOgImagePath);
		else if (options.data.config.seoMeta?.ogImage === "auto") {
			const port = 12445;
			const app = connect();
			const server = http.createServer(app);
			app.use(config.base, sirv(outDir, {
				etag: true,
				single: true,
				dev: true
			}));
			server.listen(port);
			const { exportSlides } = await import("./export-DCKSbBi5.js");
			const tempDir = resolve(outDir, "temp");
			await fs.mkdir(tempDir, { recursive: true });
			await exportSlides({
				port,
				base: config.base,
				slides: options.data.slides,
				total: options.data.slides.length,
				format: "png",
				output: tempDir,
				range: "1",
				width: options.data.config.canvasWidth,
				height: Math.round(options.data.config.canvasWidth / options.data.config.aspectRatio),
				routerMode: options.data.config.routerMode,
				waitUntil: "networkidle",
				timeout: args.timeout || 3e4,
				perSlide: true,
				omitBackground: false,
				dark: args.dark
			});
			const pngFile = (await fs.readdir(tempDir)).find((file) => file.endsWith(".png"));
			if (pngFile) {
				const generatedPath = resolve(tempDir, pngFile);
				await fs.copyFile(generatedPath, projectOgImagePath);
				await fs.copyFile(generatedPath, outputOgImagePath);
			}
			await fs.rm(tempDir, {
				recursive: true,
				force: true
			});
			server.close();
		} else throw new Error(`[Slidev] ogImage: ${filename} not found`);
	}
	await fs.copyFile(resolve(outDir, "index.html"), resolve(outDir, "404.html"));
	const redirectsPath = resolve(outDir, "_redirects");
	if (!existsSync(redirectsPath)) await fs.writeFile(redirectsPath, `${config.base}*    ${config.base}index.html   200\n`, "utf-8");
	if ([
		true,
		"true",
		"auto"
	].includes(options.data.config.download)) {
		const { exportSlides, getExportOptions } = await import("./export-DCKSbBi5.js");
		const port = 12445;
		const app = connect();
		const server = http.createServer(app);
		app.use(config.base, sirv(outDir, {
			etag: true,
			single: true,
			dev: true
		}));
		server.listen(port);
		await exportSlides({
			port,
			base: config.base,
			...getExportOptions(args, options, join(outDir, "slidev-exported.pdf"))
		});
		server.close();
	}
}

//#endregion
export { build };